<?php

/**
 * This is the model base class for the table "{{accepted}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Accepted".
 *
 * Columns in table "{{accepted}}" available as properties of the model,
 * followed by relations of table "{{accepted}}" available as properties of the model.
 *
 * @property integer $id
 * @property integer $title_id
 * @property string $reg_number
 * @property string $id_number
 * @property string $surname
 * @property string $firstname
 * @property string $othername
 * @property string $programme_id
 * @property integer $academicyear_id
 * @property string $dob
 * @property integer $gender_id
 * @property integer $marital_status_id
 * @property integer $nationality_id
 * @property integer $county_id
 * @property integer $ethnicity_id
 * @property integer $religion_id
 * @property string $postal_address
 * @property string $postcode
 * @property string $town
 * @property string $mobile
 * @property string $email
 * @property integer $disability_id
 * @property string $occupation
 * @property string $employer
 * @property string $employer_address
 * @property string $employer_telephone
 * @property string $employer_otherinfo
 * @property string $extra_info
 * @property integer $status
 * @property string $date_modified
 * @property string $photo
 * @property string $college_number
 *
 * @property Academicyear $academicyear
 * @property County $county
 * @property Answer $disability
 * @property Ethnicity $ethnicity
 * @property Gender $gender
 * @property Maritalstatus $maritalStatus
 * @property Nationality $nationality
 * @property Courseclass $programme
 * @property Religion $religion
 * @property Title $title
 */
abstract class BaseAccepted extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{accepted}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Selected Applicant|Selected Applicants', $n);
	}

	public static function representingColumn() {
		return 'reg_number';
	}

	public function rules() {
		return array(
			array('title_id, reg_number, id_number, surname, firstname, programme_id, academicyear_id, dob, gender_id, marital_status_id, nationality_id, county_id,  religion_id,  town, email, disability_id, status, college_number', 'required'),
			array('title_id, academicyear_id, gender_id, marital_status_id, nationality_id, county_id, ethnicity_id, religion_id, disability_id, status', 'numerical', 'integerOnly'=>true),
			array('reg_number, surname, firstname, othername, programme_id, dob, email, occupation, employer_telephone, date_modified, college_number', 'length', 'max'=>30),
			array('id_number, town, mobile', 'length', 'max'=>20),
			array('postal_address, employer_address, employer_otherinfo, extra_info', 'length', 'max'=>200),
			//array('postcode', 'length', 'max'=>10),
			array('employer, photo', 'length', 'max'=>100),
			array('othername, occupation, employer, employer_address, employer_telephone, employer_otherinfo, extra_info, date_modified, photo', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, title_id, reg_number, id_number, surname, firstname, othername, programme_id, academicyear_id, dob, gender_id, marital_status_id, nationality_id, county_id, ethnicity_id, religion_id, postal_address, postcode, town, mobile, email, disability_id, occupation, employer, employer_address, employer_telephone, employer_otherinfo, extra_info, status, date_modified, photo, college_number', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'academicyear' => array(self::BELONGS_TO, 'AcademicYear', 'academicyear_id'),
			'county' => array(self::BELONGS_TO, 'County', 'county_id'),
			'disability' => array(self::BELONGS_TO, 'Answer', 'disability_id'),
			'ethnicity' => array(self::BELONGS_TO, 'Ethnicity', 'ethnicity_id'),
			'gender' => array(self::BELONGS_TO, 'Gender', 'gender_id'),
			'maritalStatus' => array(self::BELONGS_TO, 'MaritalStatus', 'marital_status_id'),
			'nationality' => array(self::BELONGS_TO, 'Nationality', 'nationality_id'),
			'programme' => array(self::BELONGS_TO, 'Programme', 'programme_id'),
			'module' => array(self::BELONGS_TO, 'Module', 'module_id'),
			'religion' => array(self::BELONGS_TO, 'Religion', 'religion_id'),
			'title' => array(self::BELONGS_TO, 'Title', 'title_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'title_id' => null,
			'reg_number' => Yii::t('app', 'Reg Number'),
			'id_number' => Yii::t('app', 'Id Number'),
			'surname' => Yii::t('app', 'Surname'),
			'firstname' => Yii::t('app', 'Firstname'),
			'othername' => Yii::t('app', 'Othername'),
			'programme_id' => null,
			'academicyear_id' => null,
			'dob' => Yii::t('app', 'Dob'),
			'gender_id' => null,
			'marital_status_id' => null,
			'nationality_id' => null,
			'county_id' => null,
			'ethnicity_id' => null,
			'religion_id' => null,
			'postal_address' => Yii::t('app', 'Postal Address'),
			'postcode' => Yii::t('app', 'Postcode'),
			'town' => Yii::t('app', 'Town'),
			'mobile' => Yii::t('app', 'Mobile'),
			'email' => Yii::t('app', 'Email'),
			'disability_id' => null,
			'occupation' => Yii::t('app', 'Occupation'),
			'employer' => Yii::t('app', 'Employer'),
			'employer_address' => Yii::t('app', 'Employer Address'),
			'employer_telephone' => Yii::t('app', 'Employer Telephone'),
			'employer_otherinfo' => Yii::t('app', 'Employer Otherinfo'),
			'extra_info' => Yii::t('app', 'Extra Info'),
			'status' => Yii::t('app', 'Status'),
			'date_modified' => Yii::t('app', 'Date Modified'),
			'photo' => Yii::t('app', 'Photo'),
			'college_number' => Yii::t('app', 'Application Ref. #'),
			'academicyear' => null,
			'county' => null,
			'disability' => null,
			'ethnicity' => null,
			'gender' => null,
			'maritalStatus' => null,
			'nationality' => null,
			'programme' => 'Course/ Programme',
			'religion' => null,
			'title' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('title_id', $this->title_id);
		$criteria->compare('reg_number', $this->reg_number, true);
		$criteria->compare('id_number', $this->id_number, true);
		$criteria->compare('surname', $this->surname, true);
		$criteria->compare('firstname', $this->firstname, true);
		$criteria->compare('othername', $this->othername, true);
		$criteria->compare('programme_id', $this->programme_id);
		$criteria->compare('academicyear_id', $this->academicyear_id);
		$criteria->compare('dob', $this->dob, true);
		$criteria->compare('gender_id', $this->gender_id);
		$criteria->compare('marital_status_id', $this->marital_status_id);
		$criteria->compare('nationality_id', $this->nationality_id);
		$criteria->compare('county_id', $this->county_id);
		$criteria->compare('ethnicity_id', $this->ethnicity_id);
		$criteria->compare('religion_id', $this->religion_id);
		$criteria->compare('postal_address', $this->postal_address, true);
		$criteria->compare('postcode', $this->postcode, true);
		$criteria->compare('town', $this->town, true);
		$criteria->compare('mobile', $this->mobile, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('disability_id', $this->disability_id);
		$criteria->compare('occupation', $this->occupation, true);
		$criteria->compare('employer', $this->employer, true);
		$criteria->compare('employer_address', $this->employer_address, true);
		$criteria->compare('employer_telephone', $this->employer_telephone, true);
		$criteria->compare('employer_otherinfo', $this->employer_otherinfo, true);
		$criteria->compare('extra_info', $this->extra_info, true);
		$criteria->compare('status', $this->status);
		$criteria->compare('date_modified', $this->date_modified, true);
		$criteria->compare('photo', $this->photo, true);
		$criteria->compare('college_number', $this->college_number, true);
		$criteria->order="id desc";

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
			'pagination'=>array('pageSize'=>20)
		));
	}
}