<?php

/**
 * This is the model base class for the table "{{ict_comment}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "IctComment".
 *
 * Columns in table "{{ict_comment}}" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property integer $type_id
 * @property string $date_received
 * @property string $name
 * @property string $contact
 * @property string $description
 * @property string $date_acknowledged
 * @property string $correction
 * @property string $root_cause
 * @property string $corrective_action
 * @property string $preventive_action
 * @property string $action_by
 * @property integer $status
 * @property string $date_modified
 *
 */
abstract class BaseIctComment extends GxActiveRecord {

	public $verifyCode;
	
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{ict_comment}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'IctComment|IctComments', $n);
	}

	public static function representingColumn() {
		return 'date_received';
	}

	public function rules() {
		return array(
			array('verifyCode, type_id, date_received, name, contact, description, status', 'required'),
			array('type_id, status', 'numerical', 'integerOnly'=>true),
			array('date_received, date_acknowledged, date_modified', 'length', 'max'=>30),
			array('name, root_cause', 'length', 'max'=>100),
			array('contact, correction, corrective_action, preventive_action, action_by', 'length', 'max'=>300),
			array('description', 'length', 'max'=>500),
			array('date_acknowledged, correction, root_cause, corrective_action, preventive_action, action_by, date_modified', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, type_id, date_received, name, contact, description, date_acknowledged, correction, root_cause, corrective_action, preventive_action, action_by, status, date_modified', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'type_id' => Yii::t('app', 'Type'),
			'date_received' => Yii::t('app', 'Date Received'),
			'name' => Yii::t('app', 'Name'),
			'contact' => Yii::t('app', 'Contact'),
			'description' => Yii::t('app', 'Description'),
			'date_acknowledged' => Yii::t('app', 'Date Acknowledged'),
			'correction' => Yii::t('app', 'Correction'),
			'root_cause' => Yii::t('app', 'Root Cause'),
			'corrective_action' => Yii::t('app', 'Corrective Action'),
			'preventive_action' => Yii::t('app', 'Preventive Action'),
			'action_by' => Yii::t('app', 'Action By'),
			'status' => Yii::t('app', 'Status'),
			'date_modified' => Yii::t('app', 'Date Modified'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('type_id', $this->type_id);
		$criteria->compare('date_received', $this->date_received, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('contact', $this->contact, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('date_acknowledged', $this->date_acknowledged, true);
		$criteria->compare('correction', $this->correction, true);
		$criteria->compare('root_cause', $this->root_cause, true);
		$criteria->compare('corrective_action', $this->corrective_action, true);
		$criteria->compare('preventive_action', $this->preventive_action, true);
		$criteria->compare('action_by', $this->action_by, true);
		$criteria->compare('status', $this->status);
		$criteria->compare('date_modified', $this->date_modified, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}