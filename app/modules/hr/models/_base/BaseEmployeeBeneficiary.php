<?php

/**
 * This is the model base class for the table "{{employee_beneficiary}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "EmployeeBeneficiary".
 *
 * Columns in table "{{employee_beneficiary}}" available as properties of the model,
 * followed by relations of table "{{employee_beneficiary}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $pf_number
 * @property integer $relationship_id
 * @property string $surname
 * @property string $firstname
 * @property string $othername
 * @property boolean $status
 * @property string $date_modified
 * @property integer $benefit_percentage
 * @property string $postal_address
 * @property string $postal_code
 * @property string $town
 * @property string $mobile
 * @property string $email
 * @property string $place_of_work
 * @property string $place_of_residence
 *
 * @property Employee $pfNumber
 * @property Relationship $relationship
 */
abstract class BaseEmployeeBeneficiary extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{employee_beneficiary}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'EmployeeBeneficiary|EmployeeBeneficiaries', $n);
	}

	public static function representingColumn() {
		return 'surname';
	}

	public function rules() {
		return array(
			array('pf_number, relationship_id, surname, firstname', 'required'),
			array('relationship_id, benefit_percentage', 'numerical', 'integerOnly'=>true),
			array('pf_number, surname, id_number, firstname, othername, date_modified', 'length', 'max'=>30),
			array('postal_address, town, mobile, email, place_of_work, place_of_residence', 'length', 'max'=>100),
			array('postal_code', 'length', 'max'=>10),
			array('status', 'safe'),
			array('othername, status, date_modified, benefit_percentage, postal_address, postal_code, town, mobile, email, place_of_work, place_of_residence', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, pf_number, relationship_id, surname, firstname, othername, status, date_modified, benefit_percentage, postal_address, postal_code, town, mobile, email, place_of_work, place_of_residence', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'pfNumber' => array(self::BELONGS_TO, 'Employee', 'pf_number'),
			'relationship' => array(self::BELONGS_TO, 'Relationship', 'relationship_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'pf_number' => null,
			'relationship_id' => null,
			'surname' => Yii::t('app', 'Surname'),
			'firstname' => Yii::t('app', 'Firstname'),
			'othername' => Yii::t('app', 'Othername'),
			'status' => Yii::t('app', 'Status'),
			'date_modified' => Yii::t('app', 'Date Modified'),
			'benefit_percentage' => Yii::t('app', 'Benefit Percentage'),
			'postal_address' => Yii::t('app', 'Postal Address'),
			'postal_code' => Yii::t('app', 'Postal Code'),
			'town' => Yii::t('app', 'Town'),
			'mobile' => Yii::t('app', 'Mobile'),
			'email' => Yii::t('app', 'Email'),
			'place_of_work' => Yii::t('app', 'Place Of Work'),
			'place_of_residence' => Yii::t('app', 'Place Of Residence'),
			'pfNumber' => null,
			'relationship' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('pf_number', $this->pf_number);
		$criteria->compare('relationship_id', $this->relationship_id);
		$criteria->compare('surname', $this->surname, true);
		$criteria->compare('firstname', $this->firstname, true);
		$criteria->compare('othername', $this->othername, true);
		$criteria->compare('status', $this->status);
		$criteria->compare('date_modified', $this->date_modified, true);
		$criteria->compare('benefit_percentage', $this->benefit_percentage);
		$criteria->compare('postal_address', $this->postal_address, true);
		$criteria->compare('postal_code', $this->postal_code, true);
		$criteria->compare('town', $this->town, true);
		$criteria->compare('mobile', $this->mobile, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('place_of_work', $this->place_of_work, true);
		$criteria->compare('place_of_residence', $this->place_of_residence, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}