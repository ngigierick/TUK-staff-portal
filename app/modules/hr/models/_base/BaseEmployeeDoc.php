<?php

/**
 * This is the model base class for the table "{{employee_doc}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "EmployeeDoc".
 *
 * Columns in table "{{employee_doc}}" available as properties of the model,
 * followed by relations of table "{{employee_doc}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $pf_number
 * @property integer $category_id
 * @property string $file_name
 * @property string $date_modified
 *
 * @property Staff $pfNumber
 * @property DocType $category
 */
abstract class BaseEmployeeDoc extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{employee_doc}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'EmployeeDoc|EmployeeDocs', $n);
	}

	public static function representingColumn() {
		return 'file_name';
	}

	public function rules() {
		return array(
			array('pf_number, category_id', 'required'),
			array('category_id', 'numerical', 'integerOnly'=>true),
			array('is_image', 'boolean'),
			array('pf_number, date_modified', 'length', 'max'=>30),
			array('file_name', 'length', 'max'=>200),
			array('date_modified', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, pf_number, category_id, file_name, date_modified', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'pfNumber' => array(self::BELONGS_TO, 'Employee', 'pf_number'),
			'category' => array(self::BELONGS_TO, 'DocType', 'category_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'pf_number' => null,
			'category_id' => null,
			'file_name' => Yii::t('app', 'File Name'),
			'date_modified' => Yii::t('app', 'Date Modified'),
			'is_image' => Yii::t('app', 'Is Image'),
			'pfNumber' => null,
			'category' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('pf_number', $this->pf_number);
		$criteria->compare('category_id', $this->category_id);
		$criteria->compare('file_name', $this->file_name, true);
		$criteria->compare('date_modified', $this->date_modified, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}