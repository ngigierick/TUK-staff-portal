<?php

/**
 * This is the model base class for the table "{{employee_document}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "EmployeeDocument".
 *
 * Columns in table "{{employee_document}}" available as properties of the model,
 * followed by relations of table "{{employee_document}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $title
 * @property string $filename
 * @property string $description
 * @property integer $author_id
 * @property integer $category_id
 * @property string $date_added
 * @property string $date_modified
 * @property integer $status_id
 *
 * @property User $author
 * @property DocumentationCategory $category
 * @property Status $status
 * @property EmployeeDocumentAction[] $employeeDocumentActions
 */
abstract class BaseEmployeeDocument extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{employee_document}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Staff Document|Staff Documents', $n);
	}

	public static function representingColumn() {
		return 'title';
	}

	public function rules() {
		return array(
			array('title, filename, description, author_id, category_id', 'required'),
			array('author_id, category_id, status_id', 'numerical', 'integerOnly'=>true),
			array('title', 'length', 'max'=>300),
			array('filename', 'length', 'max'=>200),
			array('date_added, date_modified', 'length', 'max'=>30),
			array('date_added, date_modified, status_id', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, title, filename, description, author_id, category_id, date_added, date_modified, status_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'author' => array(self::BELONGS_TO, 'User', 'author_id'),
			'category' => array(self::BELONGS_TO, 'DocumentationCategory', 'category_id'),
			'status' => array(self::BELONGS_TO, 'Status', 'status_id'),
			'employeeDocumentActions' => array(self::HAS_MANY, 'EmployeeDocumentAction', 'document_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'title' => Yii::t('app', 'Title'),
			'filename' => Yii::t('app', 'Filename'),
			'description' => Yii::t('app', 'Description'),
			'author_id' => null,
			'category_id' => null,
			'date_added' => Yii::t('app', 'Date Added'),
			'date_modified' => Yii::t('app', 'Date Modified'),
			'status_id' => null,
			'author' => null,
			'category' => null,
			'status' => null,
			'employeeDocumentActions' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('filename', $this->filename, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('author_id', $this->author_id);
		$criteria->compare('category_id', $this->category_id);
		$criteria->compare('date_added', $this->date_added, true);
		$criteria->compare('date_modified', $this->date_modified, true);
		$criteria->compare('status_id', $this->status_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}