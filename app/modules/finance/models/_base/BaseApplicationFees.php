<?php

/**
 * This is the model base class for the table "{{applicationfees}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ApplicationFees".
 *
 * Columns in table "{{applicationfees}}" available as properties of the model,
 * followed by relations of table "{{applicationfees}}" available as properties of the model.
 *
 * @property integer $id
 * @property integer $academicyear_id
 * @property string $programme_code
 * @property string $surname
 * @property string $firstname
 * @property string $othername
 * @property integer $bank_account_id
 * @property string $bankslip
 * @property string $amount
 * @property string $date_modified
 * @property integer $status
 *
 * @property Academicyear $academicyear
 * @property Courseclass $programmeCode
 * @property Bankaccount $bankAccount
 */
abstract class BaseApplicationFees extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{applicationfees}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Application Fees| Application Fees', $n);
	}

	public static function representingColumn() {
		return array('surname','firstname');
	}

	public function rules() {
		return array(
			array('academicyear_id, programme_code, surname, firstname, othername, bank_account_id, bankslip, amount, status, title', 'required'),
			array('academicyear_id, bank_account_id, status', 'numerical', 'integerOnly'=>true),
			array('programme_code, surname, firstname, othername, bankslip, amount, date_modified, receiptnumber', 'length', 'max'=>30),
			array('academicyear_id, programme_code, surname, firstname, othername, bank_account_id, bankslip, amount, date_modified, status', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, academicyear_id, programme_code, surname, firstname, othername, bank_account_id, bankslip, amount, date_modified, status', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'academicyear' => array(self::BELONGS_TO, 'AcademicYear', 'academicyear_id'),
			'programmeCode' => array(self::BELONGS_TO, 'Programme', 'programme_code'),
			'bankAccount' => array(self::BELONGS_TO, 'BankAccount', 'bank_account_id'),
			'salutation' => array(self::BELONGS_TO, 'Title', 'title'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'academicyear_id' => 'Academic Year',
			'title' => Yii::t('app', 'Title'),
			'programme_code' => 'Course Applied',
			'surname' => Yii::t('app', 'Surname'),
			'firstname' => Yii::t('app', 'Firstname'),
			'othername' => Yii::t('app', 'Othername'),
			'bank_account_id' => 'Bank',
			'bankslip' => Yii::t('app', 'Bankslip'),
			'amount' => Yii::t('app', 'Amount'),
			'date_modified' => Yii::t('app', 'Date Modified'),
			'status' => Yii::t('app', 'Status'),
			'receiptnumber' => Yii::t('app', 'Receipt Number'),
			'academicyear' => 'Academic Year',
			'programmeCode' => 'Course Applied',
			'bankAccount' => 'Bank',
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('academicyear_id', $this->academicyear_id);
		$criteria->compare('programme_code', $this->programme_code);
		$criteria->compare('surname', $this->surname, true);
		$criteria->compare('firstname', $this->firstname, true);
		$criteria->compare('othername', $this->othername, true);
		$criteria->compare('receiptnumber', $this->receiptnumber, true);
		$criteria->compare('bank_account_id', $this->bank_account_id);
		$criteria->compare('bankslip', $this->bankslip, true);
		$criteria->compare('amount', $this->amount, true);
		$criteria->compare('date_modified', $this->date_modified, true);
		$criteria->compare('status', $this->status);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}