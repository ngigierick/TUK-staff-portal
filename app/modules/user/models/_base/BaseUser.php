<?php

/**
 * This is the model base class for the table "{{user}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "{{user}}" available as properties of the model,
 * followed by relations of table "{{user}}" available as properties of the model.
 *
 * @property integer $id
 * @property integer $role_id
 * @property string $name
 * @property string $email
 * @property string $password
 * @property string $pf_number
 * @property string $id_number
 * @property string $designation
 * @property string $photo
 * @property string $username
 * @property string $date_modified
 * @property string $last_login
 * @property string $ip_address
 * @property boolean $ip_login
 *
 * @property AuditTrail[] $auditTrails
 * @property Role $role
 */
abstract class BaseUser extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{user}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('role_id', 'numerical', 'integerOnly'=>true),
			array('name, email, password, pf_number, id_number, designation', 'length', 'max'=>255),
			array('username', 'length', 'max'=>20),
			array('date_modified, last_login', 'length', 'max'=>30),
			array('ip_address', 'length', 'max'=>50),
			array('ip_login', 'safe'),
			array('role_id, name, email, password, pf_number, id_number, designation, photo, username, date_modified, last_login, ip_address, ip_login', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, role_id, name, email, password, pf_number, id_number, designation, photo, username, date_modified, last_login, ip_address, ip_login', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'auditTrails' => array(self::HAS_MANY, 'AuditTrail', 'user_id'),
			'role' => array(self::BELONGS_TO, 'Role', 'role_id'),
			'securityQuestion' => array(self::BELONGS_TO, 'UserQuestion', 'security_question_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'role_id' => null,
			'name' => Yii::t('app', 'Name'),
			'email' => Yii::t('app', 'Email'),
			'password' => Yii::t('app', 'Password'),
			'pf_number' => Yii::t('app', 'Pf Number'),
			'id_number' => Yii::t('app', 'Id Number'),
			'designation' => Yii::t('app', 'Designation'),
			'photo' => Yii::t('app', 'Photo'),
			'username' => Yii::t('app', 'Username'),
			'date_modified' => Yii::t('app', 'Date Modified'),
			'last_login' => Yii::t('app', 'Last Login'),
			'ip_address' => Yii::t('app', 'IP Address'),
			'ip_login' => Yii::t('app', 'IP Login'),
			'auditTrails' => null,
			'role' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('role_id', $this->role_id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('pf_number', $this->pf_number, true);
		$criteria->compare('id_number', $this->id_number, true);
		$criteria->compare('designation', $this->designation, true);
		$criteria->compare('photo', $this->photo, true);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('date_modified', $this->date_modified, true);
		$criteria->compare('last_login', $this->last_login, true);
		$criteria->compare('ip_address', $this->ip_address, true);
		$criteria->compare('ip_login', $this->ip_login);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}