<?php

/**
 * This is the model base class for the table "{{pre_applicant}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "PreApplicant".
 *
 * Columns in table "{{pre_applicant}}" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $email
 * @property string $mobile
 * @property string $id_number
 * @property string $passowrd
 * @property integer $status
 * @property string $date_modified
 *
 */
abstract class BasePreApplicant extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{pre_applicant}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'PreApplicant|PreApplicants', $n);
	}

	public static function representingColumn() {
		return 'email';
	}

	public function rules() {
		return array(
			array('email, mobile, passowrd', 'required'),
			array('email', 'email'),
			array('status', 'numerical', 'integerOnly'=>true),
			array('mobile, date_modified', 'length', 'max'=>30),
			array('email', 'length', 'max'=>100),
			array('id_number', 'length', 'max'=>20),
			array('passowrd', 'length', 'max'=>255),
			array('id_number, date_modified', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, email, mobile, id_number, passowrd, status, date_modified', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'email' => Yii::t('app', 'Email'),
			'mobile' => Yii::t('app', 'Mobile'),
			'id_number' => Yii::t('app', 'Id Number'),
			'passowrd' => Yii::t('app', 'Passowrd'),
			'status' => Yii::t('app', 'Status'),
			'date_modified' => Yii::t('app', 'Date Modified'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('mobile', $this->mobile, true);
		$criteria->compare('id_number', $this->id_number, true);
		$criteria->compare('passowrd', $this->passowrd, true);
		$criteria->compare('status', $this->status);
		$criteria->compare('date_modified', $this->date_modified, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}