<?php

/**
 * This is the model base class for the table "{{previousstudent}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "PreviousStudent".
 *
 * Columns in table "{{previousstudent}}" available as properties of the model,
 * followed by relations of table "{{previousstudent}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $reg_number
 * @property string $course_code
 * @property string $course_year
 * @property string $study_year
 * @property string $study_term
 * @property string $class
 * @property string $status
 * @property string $surname
 * @property string $name1
 * @property string $name2
 * @property string $title
 * @property string $sex
 * @property string $dob
 * @property string $address1
 * @property string $address2
 * @property string $box
 * @property string $town
 * @property string $phone
 * @property string $extension
 * @property string $district
 * @property string $id_number
 * @property string $kencit
 * @property string $fee_payer
 * @property string $employed
 * @property string $employer
 * @property string $employment_department
 * @property string $employer_box
 * @property string $employer_town
 * @property string $employer_phone
 * @property string $location
 * @property string $sub_location
 * @property string $tlc
 * @property string $pat_date
 * @property string $pat
 * @property string $fee_date
 * @property string $term_address
 * @property string $term_box
 * @property string $term_town
 * @property string $nok_name
 * @property string $nok_box
 * @property string $nok_town
 * @property string $nok_phone
 * @property string $fee_arrears
 * @property string $eoy_res
 * @property string $xr
 * @property string $xrsig
 * @property string $cc
 * @property string $ccsig
 * @property string $lc
 * @property string $lcsig
 * @property string $prn
 * @property string $registered
 * @property string $cref
 * @property string $theid
 * @property string $abal
 * @property string $rs
 * @property string $sponsor_no
 * @property string $old_number
 * @property string $username
 * @property string $date
 * @property string $scat
 * @property string $statsig
 * @property string $statdata
 * @property string $libreg
 * @property string $lregcomm
 * @property string $lreguser
 * @property string $lregdate
 * @property string $lib_arrears
 * @property string $libmess1
 * @property string $override
 * @property string $hostel
 * @property string $host_term
 * @property string $h_fee_date
 * @property string $hostarrear
 * @property string $prov
 * @property string $dist
 * @property string $hos_arrear
 * @property string $lreg
 * @property string $lof
 * @property string $lcnumber
 * @property integer $module_id
 * @property string $date_modified
 *
 * @property Module $module
 */
abstract class BasePreviousStudent extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{previousstudent}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'PreviousStudent|PreviousStudents', $n);
	}

	public static function representingColumn() {
		return 'reg_number';
	}

	public function rules() {
		return array(
			array('reg_number, course_code, module_id', 'required'),
			array('module_id', 'numerical', 'integerOnly'=>true),
			array('reg_number, course_code, status, title, sex, extension, employed, xrsig, cc, ccsig, lc, lcsig, prn, registered, cref, theid, abal, rs, scat, statsig, statdata, libreg, override', 'length', 'max'=>20),
			array('course_year, study_year, study_term, class, name1, name2, address1, address2, box, phone, id_number, kencit, fee_payer, employer, employment_department, employer_box, employer_town, location, sub_location, tlc, pat_date, pat, fee_date, term_address, term_town, nok_box, nok_phone, fee_arrears, eoy_res, xr, sponsor_no, old_number, username, lregcomm, lreguser, lregdate, lib_arrears, libmess1, hostel, host_term, h_fee_date, hostarrear, prov, dist, hos_arrear, lreg, lof, lcnumber', 'length', 'max'=>50),
			array('surname, dob, town, district, employer_phone, term_box, nok_town, date, date_modified', 'length', 'max'=>30),
			array('nok_name', 'length', 'max'=>40),
			array('course_year, study_year, study_term, class, status, surname, name1, name2, title, sex, dob, address1, address2, box, town, phone, extension, district, id_number, kencit, fee_payer, employed, employer, employment_department, employer_box, employer_town, employer_phone, location, sub_location, tlc, pat_date, pat, fee_date, term_address, term_box, term_town, nok_name, nok_box, nok_town, nok_phone, fee_arrears, eoy_res, xr, xrsig, cc, ccsig, lc, lcsig, prn, registered, cref, theid, abal, rs, sponsor_no, old_number, username, date, scat, statsig, statdata, libreg, lregcomm, lreguser, lregdate, lib_arrears, libmess1, override, hostel, host_term, h_fee_date, hostarrear, prov, dist, hos_arrear, lreg, lof, lcnumber, date_modified', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, reg_number, course_code, course_year, study_year, study_term, class, status, surname, name1, name2, title, sex, dob, address1, address2, box, town, phone, extension, district, id_number, kencit, fee_payer, employed, employer, employment_department, employer_box, employer_town, employer_phone, location, sub_location, tlc, pat_date, pat, fee_date, term_address, term_box, term_town, nok_name, nok_box, nok_town, nok_phone, fee_arrears, eoy_res, xr, xrsig, cc, ccsig, lc, lcsig, prn, registered, cref, theid, abal, rs, sponsor_no, old_number, username, date, scat, statsig, statdata, libreg, lregcomm, lreguser, lregdate, lib_arrears, libmess1, override, hostel, host_term, h_fee_date, hostarrear, prov, dist, hos_arrear, lreg, lof, lcnumber, module_id, date_modified', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'module' => array(self::BELONGS_TO, 'Module', 'module_id'),
			'courseclass' => array(self::HAS_ONE, 'CourseClass', 'course_code'),
			'student' => array(self::HAS_MANY, 'PreviousStudentDebit', 'reg_number'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'reg_number' => Yii::t('app', 'Reg Number'),
			'course_code' => Yii::t('app', 'Programme Class'),
			'course_year' => Yii::t('app', 'Course Year'),
			'study_year' => Yii::t('app', 'Study Year'),
			'study_term' => Yii::t('app', 'Study Term'),
			'class' => Yii::t('app', 'Class'),
			'status' => Yii::t('app', 'Status'),
			'surname' => Yii::t('app', 'Surname'),
			'name1' => Yii::t('app', 'Name1'),
			'name2' => Yii::t('app', 'Name2'),
			'title' => Yii::t('app', 'Title'),
			'sex' => Yii::t('app', 'Sex'),
			'dob' => Yii::t('app', 'Dob'),
			'address1' => Yii::t('app', 'Address1'),
			'address2' => Yii::t('app', 'Address2'),
			'box' => Yii::t('app', 'Box'),
			'town' => Yii::t('app', 'Town'),
			'phone' => Yii::t('app', 'Phone'),
			'extension' => Yii::t('app', 'Extension'),
			'district' => Yii::t('app', 'District'),
			'id_number' => Yii::t('app', 'Id Number'),
			'kencit' => Yii::t('app', 'Kencit'),
			'fee_payer' => Yii::t('app', 'Fee Payer'),
			'employed' => Yii::t('app', 'Employed'),
			'employer' => Yii::t('app', 'Employer'),
			'employment_department' => Yii::t('app', 'Employment Department'),
			'employer_box' => Yii::t('app', 'Employer Box'),
			'employer_town' => Yii::t('app', 'Employer Town'),
			'employer_phone' => Yii::t('app', 'Employer Phone'),
			'location' => Yii::t('app', 'Location'),
			'sub_location' => Yii::t('app', 'Sub Location'),
			'tlc' => Yii::t('app', 'Tlc'),
			'pat_date' => Yii::t('app', 'Pat Date'),
			'pat' => Yii::t('app', 'Pat'),
			'fee_date' => Yii::t('app', 'Fee Date'),
			'term_address' => Yii::t('app', 'Term Address'),
			'term_box' => Yii::t('app', 'Term Box'),
			'term_town' => Yii::t('app', 'Term Town'),
			'nok_name' => Yii::t('app', 'Nok Name'),
			'nok_box' => Yii::t('app', 'Nok Box'),
			'nok_town' => Yii::t('app', 'Nok Town'),
			'nok_phone' => Yii::t('app', 'Nok Phone'),
			'fee_arrears' => Yii::t('app', 'Fee Arrears'),
			'eoy_res' => Yii::t('app', 'Eoy Res'),
			'xr' => Yii::t('app', 'Xr'),
			'xrsig' => Yii::t('app', 'Xrsig'),
			'cc' => Yii::t('app', 'Cc'),
			'ccsig' => Yii::t('app', 'Ccsig'),
			'lc' => Yii::t('app', 'Lc'),
			'lcsig' => Yii::t('app', 'Lcsig'),
			'prn' => Yii::t('app', 'Prn'),
			'registered' => Yii::t('app', 'Registered'),
			'cref' => Yii::t('app', 'Cref'),
			'theid' => Yii::t('app', 'Theid'),
			'abal' => Yii::t('app', 'Abal'),
			'rs' => Yii::t('app', 'Rs'),
			'sponsor_no' => Yii::t('app', 'Sponsor No'),
			'old_number' => Yii::t('app', 'Old Number'),
			'username' => Yii::t('app', 'Username'),
			'date' => Yii::t('app', 'Date'),
			'scat' => Yii::t('app', 'Scat'),
			'statsig' => Yii::t('app', 'Statsig'),
			'statdata' => Yii::t('app', 'Statdata'),
			'libreg' => Yii::t('app', 'Libreg'),
			'lregcomm' => Yii::t('app', 'Lregcomm'),
			'lreguser' => Yii::t('app', 'Lreguser'),
			'lregdate' => Yii::t('app', 'Lregdate'),
			'lib_arrears' => Yii::t('app', 'Lib Arrears'),
			'libmess1' => Yii::t('app', 'Libmess1'),
			'override' => Yii::t('app', 'Override'),
			'hostel' => Yii::t('app', 'Hostel'),
			'host_term' => Yii::t('app', 'Host Term'),
			'h_fee_date' => Yii::t('app', 'H Fee Date'),
			'hostarrear' => Yii::t('app', 'Hostarrear'),
			'prov' => Yii::t('app', 'Prov'),
			'dist' => Yii::t('app', 'Dist'),
			'hos_arrear' => Yii::t('app', 'Hos Arrear'),
			'lreg' => Yii::t('app', 'Lreg'),
			'lof' => Yii::t('app', 'Lof'),
			'lcnumber' => Yii::t('app', 'Lcnumber'),
			'module_id' => null,
			'date_modified' => Yii::t('app', 'Date Modified'),
			'module' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('reg_number', $this->reg_number, true);
		$criteria->compare('course_code', $this->course_code, true);
		$criteria->compare('course_year', $this->course_year, true);
		$criteria->compare('study_year', $this->study_year, true);
		$criteria->compare('study_term', $this->study_term, true);
		$criteria->compare('class', $this->class, true);
		$criteria->compare('status', $this->status, true);
		$criteria->compare('surname', $this->surname, true);
		$criteria->compare('name1', $this->name1, true);
		$criteria->compare('name2', $this->name2, true);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('sex', $this->sex, true);
		$criteria->compare('dob', $this->dob, true);
		$criteria->compare('address1', $this->address1, true);
		$criteria->compare('address2', $this->address2, true);
		$criteria->compare('box', $this->box, true);
		$criteria->compare('town', $this->town, true);
		$criteria->compare('phone', $this->phone, true);
		$criteria->compare('extension', $this->extension, true);
		$criteria->compare('district', $this->district, true);
		$criteria->compare('id_number', $this->id_number, true);
		$criteria->compare('kencit', $this->kencit, true);
		$criteria->compare('fee_payer', $this->fee_payer, true);
		$criteria->compare('employed', $this->employed, true);
		$criteria->compare('employer', $this->employer, true);
		$criteria->compare('employment_department', $this->employment_department, true);
		$criteria->compare('employer_box', $this->employer_box, true);
		$criteria->compare('employer_town', $this->employer_town, true);
		$criteria->compare('employer_phone', $this->employer_phone, true);
		$criteria->compare('location', $this->location, true);
		$criteria->compare('sub_location', $this->sub_location, true);
		$criteria->compare('tlc', $this->tlc, true);
		$criteria->compare('pat_date', $this->pat_date, true);
		$criteria->compare('pat', $this->pat, true);
		$criteria->compare('fee_date', $this->fee_date, true);
		$criteria->compare('term_address', $this->term_address, true);
		$criteria->compare('term_box', $this->term_box, true);
		$criteria->compare('term_town', $this->term_town, true);
		$criteria->compare('nok_name', $this->nok_name, true);
		$criteria->compare('nok_box', $this->nok_box, true);
		$criteria->compare('nok_town', $this->nok_town, true);
		$criteria->compare('nok_phone', $this->nok_phone, true);
		$criteria->compare('fee_arrears', $this->fee_arrears, true);
		$criteria->compare('eoy_res', $this->eoy_res, true);
		$criteria->compare('xr', $this->xr, true);
		$criteria->compare('xrsig', $this->xrsig, true);
		$criteria->compare('cc', $this->cc, true);
		$criteria->compare('ccsig', $this->ccsig, true);
		$criteria->compare('lc', $this->lc, true);
		$criteria->compare('lcsig', $this->lcsig, true);
		$criteria->compare('prn', $this->prn, true);
		$criteria->compare('registered', $this->registered, true);
		$criteria->compare('cref', $this->cref, true);
		$criteria->compare('theid', $this->theid, true);
		$criteria->compare('abal', $this->abal, true);
		$criteria->compare('rs', $this->rs, true);
		$criteria->compare('sponsor_no', $this->sponsor_no, true);
		$criteria->compare('old_number', $this->old_number, true);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('date', $this->date, true);
		$criteria->compare('scat', $this->scat, true);
		$criteria->compare('statsig', $this->statsig, true);
		$criteria->compare('statdata', $this->statdata, true);
		$criteria->compare('libreg', $this->libreg, true);
		$criteria->compare('lregcomm', $this->lregcomm, true);
		$criteria->compare('lreguser', $this->lreguser, true);
		$criteria->compare('lregdate', $this->lregdate, true);
		$criteria->compare('lib_arrears', $this->lib_arrears, true);
		$criteria->compare('libmess1', $this->libmess1, true);
		$criteria->compare('override', $this->override, true);
		$criteria->compare('hostel', $this->hostel, true);
		$criteria->compare('host_term', $this->host_term, true);
		$criteria->compare('h_fee_date', $this->h_fee_date, true);
		$criteria->compare('hostarrear', $this->hostarrear, true);
		$criteria->compare('prov', $this->prov, true);
		$criteria->compare('dist', $this->dist, true);
		$criteria->compare('hos_arrear', $this->hos_arrear, true);
		$criteria->compare('lreg', $this->lreg, true);
		$criteria->compare('lof', $this->lof, true);
		$criteria->compare('lcnumber', $this->lcnumber, true);
		$criteria->compare('module_id', $this->module_id);
		$criteria->compare('date_modified', $this->date_modified, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
			'pagination'=>array('pageSize'=>100)
		));
	}
}